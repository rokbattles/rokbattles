"use client";

import { cache, useMemo } from "react";
import commandersData from "@/autogenerated/commanders.json";

const DEFAULT_LOCALE = "en";

const commanderMap = commandersData.commanders;

type CommanderIdKey = keyof typeof commanderMap;
type CommanderEntry = (typeof commanderMap)[CommanderIdKey];
type CommanderLocale = keyof CommanderEntry["name"];

const resolveCommanderNameInternal = cache(
  (id: number | null | undefined, locale: string = DEFAULT_LOCALE) => {
    if (typeof id !== "number" || !Number.isFinite(id) || id <= 0) {
      return undefined;
    }

    const commander = commanderMap[String(id) as CommanderIdKey];
    if (!commander) {
      return undefined;
    }

    const requestedLocale = locale ?? DEFAULT_LOCALE;
    return (
      (commander.name as Record<string, string | undefined>)[requestedLocale] ??
      commander.name[DEFAULT_LOCALE as CommanderLocale]
    );
  }
);

export function useCommanderName(id: number | null | undefined, locale = DEFAULT_LOCALE) {
  return useMemo(() => resolveCommanderNameInternal(id, locale), [id, locale]);
}

export type CommanderOption = {
  id: number;
  name: string;
};

export function useCommanderOptions(locale = DEFAULT_LOCALE) {
  return useMemo<CommanderOption[]>(() => {
    const entries = Object.entries(commanderMap).map(([id, commander]) => {
      const localizedName =
        commander.name[locale as CommanderLocale] ??
        commander.name[DEFAULT_LOCALE as CommanderLocale] ??
        String(id);

      return {
        id: Number(id),
        name: localizedName,
      };
    });

    return entries.sort((a, b) => a.name.localeCompare(b.name));
  }, [locale]);
}
